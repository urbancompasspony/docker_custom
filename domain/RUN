#!/bin/bash

NOMECONTAINER="dominio"

if [ "$(arch)" = "x86_64" ]; then
  docker_repo="urbancompasspony/domain:latest"
else
  docker_repo="urbancompasspony/domain-arm:latest"
fi

imagem="active-directory"

CustmN2="F.Q.D.N."
CustmN3="Local_IP"
CustmN4="ADM_Pass"
CustmN5="PiHole?"
CustmN6="Hostname"
CustmN7="Net_LAN"
CustmN8="MNT_Path"
CustmN9="CUPSPass"
CustmN10=""

VALUE2="ad."
VALUE3=""
VALUE4=""
VALUE5="1.0.0.1"
VALUE6="$HOSTNAME"
VALUE7="macvlan"
VALUE8="-v /mnt:/mnt"
VALUE9="admin"
VALUE10=""

function set_mkdir {
  sudo mkdir -p /srv/containers/"$NOMECONTAINER"/{log,data,config}
  sudo mkdir -p /srv/containers/"$NOMECONTAINER"/cups/{config,log}
  sudo touch /srv/containers/"$NOMECONTAINER"/log/syslog

}

function docker_create {
  local ip_regex="^([0-9]{1,3}\.){3}[0-9]{1,3}$"

  # Se NAO for numerico, execute como host!
  if [[ ! "$VALUE3" =~ $ip_regex ]]; then

    docker run --privileged -d --name="$NOMECONTAINER" --hostname="$NOMECONTAINER" \
    --network host \
    --dns-search $VALUE2 \
    --add-host "$VALUE6"."$VALUE2":"$VALUE3" \
    --no-healthcheck --restart=unless-stopped -v /etc/localtime:/etc/localtime:ro \
    --device /dev/bus/usb \
    --ulimit nofile=1024:1024 \
    -p "$VALUE3":53:53 -p "$VALUE3":53:53/udp -p "$VALUE3":88:88 -p "$VALUE3":88:88/udp -p "$VALUE3":135:135 -p "$VALUE3":137:137 -p "$VALUE3":137:137/udp -p "$VALUE3":138:138 -p "$VALUE3":138:138/udp -p "$VALUE3":139:139 \
    -p "$VALUE3":389:389 -p "$VALUE3":389:389/udp -p "$VALUE3":445:445 -p "$VALUE3":464:464 -p "$VALUE3":464:464/udp -p "$VALUE3":636:636 -p "$VALUE3":1024-1044:1024-1044 -p "$VALUE3":3268-3269:3268-3269 -p 631:631 -p 631:631/udp \
    -e DOMAIN="$VALUE2" \
    -e DOMAINPASS="$VALUE4" \
    -e DNSFORWARDER="$VALUE5" \
    -e HOSTIP="$VALUE3" \
    -e CUPSADMIN="admin" \
    -e CUPSPASSWORD="$VALUE9" \
    -e TZ="America/Bahia" \
    -v /srv/containers/"$NOMECONTAINER"/log/syslog:/var/log/syslog \
    -v /srv/containers/"$NOMECONTAINER"/data/:/var/lib/samba \
    -v /srv/containers/"$NOMECONTAINER"/config/:/etc/samba/external \
    -v /srv/containers/"$NOMECONTAINER"/cups/config:/etc/cups \
    -v /srv/containers/"$NOMECONTAINER"/cups/log:/var/log/cups \
    -v "/srv/containers/$NOMECONTAINER/config:/config" \
    -v "/srv/containers/$NOMECONTAINER/data:/data" \
    $VALUE8 \
    "$docker_repo"

    return
  fi

  docker run --privileged -d --name="$NOMECONTAINER" --hostname="$NOMECONTAINER" \
  --network macvlan --ip="$VALUE3" --dns="$VALUE3" --dns="$VALUE5" \
  --dns-search $VALUE2 \
  --add-host "$VALUE6"."$VALUE2":"$VALUE3" \
  --no-healthcheck --restart=unless-stopped -v /etc/localtime:/etc/localtime:ro \
  --device /dev/bus/usb \
  --ulimit nofile=1024:1024 \
  -p "$VALUE3":53:53 -p "$VALUE3":53:53/udp -p "$VALUE3":88:88 -p "$VALUE3":88:88/udp -p "$VALUE3":135:135 -p "$VALUE3":137:137 -p "$VALUE3":137:137/udp -p "$VALUE3":138:138 -p "$VALUE3":138:138/udp -p "$VALUE3":139:139 \
  -p "$VALUE3":389:389 -p "$VALUE3":389:389/udp -p "$VALUE3":445:445 -p "$VALUE3":464:464 -p "$VALUE3":464:464/udp -p "$VALUE3":636:636 -p "$VALUE3":1024-1044:1024-1044 -p "$VALUE3":3268-3269:3268-3269 -p 631:631 -p 631:631/udp \
  -e DOMAIN="$VALUE2" \
  -e DOMAINPASS="$VALUE4" \
  -e DNSFORWARDER="$VALUE5" \
  -e HOSTIP="$VALUE3" \
  -e CUPSADMIN="admin" \
  -e CUPSPASSWORD="$VALUE9" \
  -e TZ="America/Bahia" \
  -v /srv/containers/"$NOMECONTAINER"/log/syslog:/var/log/syslog \
  -v /srv/containers/"$NOMECONTAINER"/data/:/var/lib/samba \
  -v /srv/containers/"$NOMECONTAINER"/config/:/etc/samba/external \
  -v /srv/containers/"$NOMECONTAINER"/cups/config:/etc/cups \
  -v /srv/containers/"$NOMECONTAINER"/cups/log:/var/log/cups \
  -v "/srv/containers/$NOMECONTAINER/config:/config" \
  -v "/srv/containers/$NOMECONTAINER/data:/data" \
  $VALUE8 \
  "$docker_repo"
}

function docker_extras {
clear
echo ""; echo "############################################################"
echo ""; echo "Configuring Apache2"; echo ""
docker exec "$NOMECONTAINER" bash -c "curl -sSL https://raw.githubusercontent.com/urbancompasspony/docker/refs/heads/main/rsat-webui-samba/autoconfig.sh | bash"
docker exec "$NOMECONTAINER" bash -c "curl -sSL https://raw.githubusercontent.com/urbancompasspony/docker/refs/heads/main/rsat-webui-samba/setup_auth.sh > setup_auth.sh"
docker exec "$NOMECONTAINER" bash -c "curl -sSL https://raw.githubusercontent.com/urbancompasspony/docker/refs/heads/main/rsat-webui-samba/auth-toggle.sh > auth-toggle.sh"
docker exec "$NOMECONTAINER" bash -c "mv setup_auth.sh /usr/bin/; chmod +x /usr/bin/setup_auth.sh"
docker exec "$NOMECONTAINER" bash -c "mv auth-toggle.sh /usr/bin/; chmod +x /usr/bin/auth-toggle.sh"
echo ""; echo "OK"; sleep 0.5

echo ""; echo "############################################################"
echo ""; echo "Removing loopback network from smb.conf"; echo ""
sudo sed -i '/127.0.0/d' /srv/containers/"$NOMECONTAINER"/config/smb.conf
echo ""; echo "OK"; sleep 0.5

echo ""; echo "############################################################"
echo ""; echo "Restoring CUPS Default Config"; echo ""
docker exec "$NOMECONTAINER" bash -c '
  cp -rp /etc/cups-bak/* /etc/cups/
  sed -i "s/Listen localhost:631/Listen 0.0.0.0:631/" /etc/cups/cupsd.conf
  sed -i "s/Browsing Off/Browsing On/" /etc/cups/cupsd.conf
  sed -i "s/<Location \/>/<Location \/>\n  Allow All/" /etc/cups/cupsd.conf
  sed -i "s/<Location \/admin>/<Location \/admin>\n  Allow All\n  Require user @SYSTEM/" /etc/cups/cupsd.conf
  sed -i "s/<Location \/admin\/conf>/<Location \/admin\/conf>\n  Allow All/" /etc/cups/cupsd.conf
  echo "ServerAlias *" >> /etc/cups/cupsd.conf
  echo "DefaultEncryption Never" >> /etc/cups/cupsd.conf
'
echo ""; echo "OK"; sleep 0.5

echo ""; echo "############################################################"
echo ""; echo "Getting MENU for samba-tools"; echo ""
docker exec "$NOMECONTAINER" bash -c "wget https://raw.githubusercontent.com/urbancompasspony/server/main/domain -O /root/.init"
docker exec "$NOMECONTAINER" bash -c "echo '/root/.init' >> /root/.bashrc"
docker exec "$NOMECONTAINER" bash -c "echo alias menu=\'/root/.init\' >> /root/.bashrc"
docker exec "$NOMECONTAINER" bash -c "echo alias domain=\'/root/.init\' >> /root/.bashrc"
docker exec "$NOMECONTAINER" bash -c "chmod +x /root/.init"
echo ""; echo "OK"; sleep 0.5

echo ""; echo "############################################################"
echo ""; echo "Adjusting /syslog and NTP"; echo ""
docker exec "$NOMECONTAINER" rm /run/rsyslog.pid
docker exec "$NOMECONTAINER" chmod 777 -R /var/log/syslog
docker exec "$NOMECONTAINER" chmod 777 -R /var/lib/samba/sysvol
echo ""; echo "OK"; sleep 0.5

echo ""; echo "############################################################"
echo ""; echo "Restarting Domain!"; echo ""
docker restart "$NOMECONTAINER"
echo ""; echo "OK"; sleep 0.5

echo ""; echo "############################################################"
echo ""; echo "Adjusting SYSVOL Permissions"; echo ""
docker exec "$NOMECONTAINER" samba-tool ntacl sysvolreset -U Administrator
echo ""; echo "OK"; sleep 0.5
:; }

# ----------------------------------------------------------------------
# ----------------------------------------------------------------------
# ----------------------------------------------------------------------

masterfile="/srv/system.yaml"
configfile="/srv/containers.yaml"
button_ok0="Criar"

labels=("nome_custom" "$CustmN2" "$CustmN3" "$CustmN4" "$CustmN5" "$CustmN6" "$CustmN7" "$CustmN8" "$CustmN9" "$CustmN10")

values=("$NOMECONTAINER" "$VALUE2" "$VALUE3" "$VALUE4" "$VALUE5" "$VALUE6" "$VALUE7" "$VALUE8" "$VALUE9" "$VALUE10")

function check_root {
  [ "$EUID" -ne 0 ] && {
    echo "Execute esse script como Root! Saindo..."
    exit 1
  }
}

function check_macvlan {
  if ! docker inspect macvlan 1>/dev/null 2>/dev/null; then
    echo "A macvlan nÃ£o existe! Saindo..."; sleep 3
    exit 0
  fi
}

function try_pull {
  if ! docker pull "$docker_repo"; then
    echo "Erro: docker pull falhou... saindo."; sleep 3
    exit 1
  fi
}

function lockfile0 {
  if [ -f /srv/lockfile ]; then
    if ! [ -f "$configfile" ]; then
      echo ""; echo "ERRO CRITICO: NAO ENCONTREI O $configfile DESTE CONTAINER! Saindo."; sleep 5
      exit 1
    else
      yq -r "to_entries[] | select(.value.img_base | test(\"$imagem\")) | .key" "$configfile" | while read -r container; do
        process_container "$container"
      done
    fi
  else
    main_menu
  fi
}

function process_container {
  local container="$1"

  for i in "${!labels[@]}"; do
    val="$(yq -r '.["'"$container"'"].["'"${labels[$i]}"'"]' "$configfile")"
    if [[ "$val" == "null" || -z "$val" ]]; then
      eval "VALUE$((i+1))=\"\""
      values[i]=""
    else
      eval "VALUE$((i+1))=\"$val\""
      values[i]="$val"
    fi
  done

  NOMECONTAINER="$container"
  signal0
  set_mkdir
  try_pull
  docker_create
  docker_extras
  save_config
}

function load_data {
  if ! [ -f "$configfile" ]; then
    return
  fi

  if [ "$(grep -c -w "$imagem" "$configfile")" -gt 1 ]; then
    LISTANOMES=$(yq -r 'to_entries[] | select(.value.img_base == "'"$imagem"'") | .value.nome_custom' "$configfile")
    NOMECONTAINER=$(dialog --title "Imagem detectada: $imagem" --backtitle "W A R N I N G" --ok-button "Carregar" --no-cancel --inputbox "Encontrei um ou mais de um container registrado com essa imagem! Qual deseja carregar?\nValores encontrados:\n$LISTANOMES" 0 0 "" 2>&1 > /dev/tty)
  fi

  for i in "${!labels[@]}"; do
    val="$(yq -r '.["'"$NOMECONTAINER"'"].["'"${labels[$i]}"'"]' "$configfile")"
    if [[ "$val" == "null" || -z "$val" ]]; then
      eval "VALUE$((i+1))=\"${values[$i]}\""
      values[i]="${values[$i]}"
    else
      eval "VALUE$((i+1))=\"$val\""
      values[i]="$val"
    fi
  done

  if ! [ "$NOMECONTAINER" = "" ]; then
    button_ok0="Recriar"
  fi
}

function save_config {
  sudo touch "$configfile"

  datetime0=$(date +"%d-%m-%Y_%H:%M")
  sudo yq -i ".\"${NOMECONTAINER}\".instalacao = \"${datetime0}\"" "$configfile"
  sudo yq -i ".\"${NOMECONTAINER}\".img_base = \"${imagem}\"" "$configfile"

  for i in "${!labels[@]}"; do
    sudo yq -i ".\"${NOMECONTAINER}\".\"${labels[$i]}\" = \"${values[$i]}\"" "$configfile"
  done
}

function main_menu {
  load_data

  form_args=()
  for idx in "${!labels[@]}"; do
    line=$((idx+1))
    form_args+=("${labels[$idx]}:" "$line" 1 "${values[$idx]}" "$line" 17 150 0)
  done

  if ! form=$(dialog --ok-label "$button_ok0" --title "Novo Container" --form "Imagem Base: $imagem" 17 80 0 \
    "${form_args[@]}" 3>&1 1>&2 2>&3 3>&- > /dev/tty); then
    return
  fi

  mapfile -t VALUES <<< "$form"
  for i in {1..10}; do
    eval "VALUE$i=\"\${VALUES[$((i-1))]}\""
    values[i-1]="${VALUES[$((i-1))]}"
  done

  NOMECONTAINER="${VALUES[0]}"

  check_IP
}

function check_IP {
  local ip_regex="^([0-9]{1,3}\.){3}[0-9]{1,3}$"

  # Se NAO for numerico, ignore a verificacao.
  if [[ ! "$VALUE3" =~ $ip_regex ]]; then
    save_config
    mkdir0
    try_pull
    docker_create
    docker_extras
    cleanup0
    return
  fi

  # Valor numerico exemplo 192.168.0.1? Verifique!
  if ip_conflict_check "$VALUE3" "$NOMECONTAINER" "$configfile"; then
    dialog --title "ERRO" --msgbox "Conflito de IP detectado no $configfile:\nMesmo IP de outro container!" 7 40
    main_menu
  elif grep -wq "$VALUE3" "$masterfile"; then
    dialog --title "ERRO" --msgbox "Conflito de IP detectado no $masterfile:\nMesmo IP do host!" 7 40
    main_menu
  else
    save_config
    mkdir0
    try_pull
    docker_create
    docker_extras
    cleanup0
  fi
}

function ip_conflict_check {
  local ip="$1"; local mycontainer="$2"; local configfile="$3"
  yq 'to_entries | map(select(.key != "'"$mycontainer"'")) | .[].value.local_ip' "$configfile" | grep -wq "$ip"
}

function mkdir0 {
  if [ -d "/srv/containers/$NOMECONTAINER" ]; then
    if ! dialog --title "WARNING" --yes-label "Prosseguir" --no-label "CANCELAR" --yesno "Foram identificados dados de volumes! \n\nParando e removendo container caso esteja rodando. \n\nSe precisar, apague o conteudo de /srv/containers/$NOMECONTAINER manualmente" 14 50; then
      exit 0
    fi
    signal0
  fi
  signal0
  set_mkdir
}

function signal0 {
  if [ -d /srv/containers/"$NOMECONTAINER" ]; then
    if docker stop "$NOMECONTAINER"; then
      docker rm "$NOMECONTAINER"
      clear; echo "SIGTERM + STOP + CLEAN: O container $NOMECONTAINER estava executando, foi parado e removido. Continuando..."; sleep 3
      return
    elif docker rm "$NOMECONTAINER"; then
      clear; echo "STOP + CLEAN: O container $NOMECONTAINER estava parado e foi removido. Continuando..."; sleep 3
      return
    else
      clear; echo "CLEAN: O container $NOMECONTAINER nao estava executando. Continuando..."; sleep 3
    fi

    return
  fi

  if docker rm -f "$NOMECONTAINER"; then
    clear; echo "SIGKILL + RM: O container $NOMECONTAINER estava executando SEM VOLUME! Foi morto e removido. Continuando..."; sleep 3
  fi
}

function cleanup0 {
  for i in {1..10}; do
    unset "VALUE$i"
  done

  for i in {1..10}; do
    unset "CustmN$i"
  done

  echo ""; echo "Limpando imagens desnecessarias..."
  docker image prune -af
  sleep 1
}

check_root
check_macvlan
lockfile0

exit 0
